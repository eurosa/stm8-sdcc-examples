#define enableInterrupts()    {__asm__("rim\n");}  /* enable interrupts */
#define disableInterrupts()   {__asm__("sim\n");}  /* disable interrupts */
#define rim()                 {__asm__("rim\n");}  /* enable interrupts */
#define sim()                 {__asm__("sim\n");}  /* disable interrupts */
#define nop()                 {__asm__("nop\n");}  /* No Operation */
#define trap()                {__asm__("trap\n");} /* Trap (soft IT) */
#define wfi()                 {__asm__("wfi\n");}  /* Wait For Interrupt */
#define halt()                {__asm__("halt\n");} /* Halt */

#define BIT_0           (1 << 0)
#define BIT_1           (1 << 1)
#define BIT_2           (1 << 2)
#define BIT_3           (1 << 3)
#define BIT_4           (1 << 4)
#define BIT_5           (1 << 5)
#define BIT_6           (1 << 6)
#define BIT_7           (1 << 7)

/* Option Byte */
#define OPT2	(*(volatile uint8_t *)0x4803)
#define NOPT2	(*(volatile uint8_t *)0x4804)

/* Option Byte 2 AFR Bits */
#define AFR0           (1 << 0)
#define AFR1           (1 << 1)
#define AFR2           (1 << 2)
#define AFR3           (1 << 3)
#define AFR4           (1 << 4)
#define AFR5           (1 << 5)
#define AFR6           (1 << 6)
#define AFR7           (1 << 7)

/* Option Byte 2 NAFR Bits */
#define NAFR0           ~(1 << 0)
#define NAFR1           ~(1 << 1)
#define NAFR2           ~(1 << 2)
#define NAFR3           ~(1 << 3)
#define NAFR4           ~(1 << 4)
#define NAFR5           ~(1 << 5)
#define NAFR6           ~(1 << 6)
#define NAFR7           ~(1 << 7)


/* GPIO */
#define PA_ODR	(*(volatile uint8_t *)0x5000)
#define PA_IDR	(*(volatile uint8_t *)0x5001)
#define PA_DDR	(*(volatile uint8_t *)0x5002)
#define PA_CR1	(*(volatile uint8_t *)0x5003)
#define PA_CR2	(*(volatile uint8_t *)0x5004)
#define PB_ODR	(*(volatile uint8_t *)0x5005)
#define PB_IDR	(*(volatile uint8_t *)0x5006)
#define PB_DDR	(*(volatile uint8_t *)0x5007)
#define PB_CR1	(*(volatile uint8_t *)0x5008)
#define PB_CR2	(*(volatile uint8_t *)0x5009)
#define PC_ODR	(*(volatile uint8_t *)0x500A)
#define PC_IDR	(*(volatile uint8_t *)0x500B)
#define PC_DDR	(*(volatile uint8_t *)0x500C)
#define PC_CR1	(*(volatile uint8_t *)0x500D)
#define PC_CR2	(*(volatile uint8_t *)0x500E)
#define PD_ODR	(*(volatile uint8_t *)0x500F)
#define PD_IDR	(*(volatile uint8_t *)0x5010)
#define PD_DDR	(*(volatile uint8_t *)0x5011)
#define PD_CR1	(*(volatile uint8_t *)0x5012)
#define PD_CR2	(*(volatile uint8_t *)0x5013)
#define PE_ODR	(*(volatile uint8_t *)0x5014)
#define PE_IDR	(*(volatile uint8_t *)0x5015)
#define PE_DDR	(*(volatile uint8_t *)0x5016)
#define PE_CR1	(*(volatile uint8_t *)0x5017)
#define PE_CR2	(*(volatile uint8_t *)0x5018)
#define PF_ODR	(*(volatile uint8_t *)0x5019)
#define PF_IDR	(*(volatile uint8_t *)0x501A)
#define PF_DDR	(*(volatile uint8_t *)0x501B)
#define PF_CR1	(*(volatile uint8_t *)0x501C)
#define PF_CR2	(*(volatile uint8_t *)0x501D)

#if defined(STM8S005)
    // Port G
    #define PG_ODR	(*(volatile uint8_t *)0x501E)
    #define PG_IDR	(*(volatile uint8_t *)0x501F)
    #define PG_DDR	(*(volatile uint8_t *)0x5020)
    #define PG_CR1	(*(volatile uint8_t *)0x5021)
    #define PG_CR2	(*(volatile uint8_t *)0x5022)

    // Port H
    #define PH_ODR	(*(volatile uint8_t *)0x5023)
    #define PH_IDR	(*(volatile uint8_t *)0x5024)
    #define PH_DDR	(*(volatile uint8_t *)0x5025)
    #define PH_CR1	(*(volatile uint8_t *)0x5026)
    #define PH_CR2	(*(volatile uint8_t *)0x5027)

    // Port I
    #define PI_ODR	(*(volatile uint8_t *)0x5028)
    #define PI_IDR	(*(volatile uint8_t *)0x5029)
    #define PI_DDR	(*(volatile uint8_t *)0x502A)
    #define PI_CR1	(*(volatile uint8_t *)0x502B)
    #define PI_CR2	(*(volatile uint8_t *)0x502C)
#endif


/* GPIO Bits */
#define GPIO_PIN0           (1 << 0)
#define GPIO_PIN1           (1 << 1)
#define GPIO_PIN2           (1 << 2)
#define GPIO_PIN3           (1 << 3)
#define GPIO_PIN4           (1 << 4)
#define GPIO_PIN5           (1 << 5)
#define GPIO_PIN6           (1 << 6)
#define GPIO_PIN7           (1 << 7)

/* Flash */
#define FLASH_CR1	(*(volatile uint8_t *)0x505A)
#define FLASH_CR2	(*(volatile uint8_t *)0x505B)
#define FLASH_NCR2	(*(volatile uint8_t *)0x505C)
#define FLASH_FPR	(*(volatile uint8_t *)0x505D)
#define FLASH_NFPR	(*(volatile uint8_t *)0x505E)
#define FLASH_IAPSR	(*(volatile uint8_t *)0x505F)
#define FLASH_PUKR	(*(volatile uint8_t *)0x5062)
#define FLASH_DUKR	(*(volatile uint8_t *)0x5064)

#define EXTI_CR1	(*(volatile uint8_t *)0x50A0)
#define EXTI_CR2	(*(volatile uint8_t *)0x50A1)
#define RST RST_SR	(*(volatile uint8_t *)0x50B3)

#define CLK_ICKR	(*(volatile uint8_t *)0x50C0)
#define CLK_ECKR	(*(volatile uint8_t *)0x50C1)
#define CLK_CMSR	(*(volatile uint8_t *)0x50C3)
#define CLK_SWR	(*(volatile uint8_t *)0x50C4)
#define CLK_SWCR	(*(volatile uint8_t *)0x50C5)
#define CLK_CKDIVR	(*(volatile uint8_t *)0x50C6)
#define CLK_PCKENR1	(*(volatile uint8_t *)0x50C7)
#define CLK_CSSR	(*(volatile uint8_t *)0x50C8)
#define CLK_CCOR	(*(volatile uint8_t *)0x50C9)
#define CLK_PCKENR2	(*(volatile uint8_t *)0x50CA)
#define CLK_HSITRIMR	(*(volatile uint8_t *)0x50CC)
#define CLK_SWIMCCR	(*(volatile uint8_t *)0x50CD)

#define FLASH_IAPSR_WR_PG_DIS     (1 << 0)
#define FLASH_IAPSR_PUL           (1 << 1)
#define FLASH_IAPSR_EOP           (1 << 2)
#define FLASH_IAPSR_DUL           (1 << 3)


/*  Peripheral Clock Bits  */
#define PCKEN1_TIM1   (1 << 7)
#define PCKEN1_TIM2   (1 << 5)
#define PCKEN1_TIM4   (1 << 4)
#define PCKEN1_UART1  (1 << 3)
#define PCKEN1_SPI    (1 << 1)
#define PCKEN1_I2C    (1 << 0)
#define PCKEN2_ADC    (1 << 3)
#define PCKEN2_AWU    (1 << 2)


#define WWDG_CR	(*(volatile uint8_t *)0x50D1)
#define WWDG_WR	(*(volatile uint8_t *)0x50D2)
#define IWDG_KR	(*(volatile uint8_t *)0x50E0)
#define IWDG_PR	(*(volatile uint8_t *)0x50E1)
#define IWDG_RLR	(*(volatile uint8_t *)0x50E2)
#define AWU_CSR1	(*(volatile uint8_t *)0x50F0)
#define AWU_APR	(*(volatile uint8_t *)0x50F1)
#define AWU_TBR	(*(volatile uint8_t *)0x50F2)

#define BEEP_CSR	(*(volatile uint8_t *)0x50F3)

#define SPI_CR1	(*(volatile uint8_t *)0x5200)
#define SPI_CR2	(*(volatile uint8_t *)0x5201)
#define SPI_ICR	(*(volatile uint8_t *)0x5202)
#define SPI_SR	(*(volatile uint8_t *)0x5203)
#define SPI_DR	(*(volatile uint8_t *)0x5204)
#define SPI_CRCPR	(*(volatile uint8_t *)0x5205)
#define SPI_RXCRCR	(*(volatile uint8_t *)0x5206)
#define SPI_TXCRCR	(*(volatile uint8_t *)0x5207)

#define I2C_CR1 I2C	(*(volatile uint8_t *)0x5210)
#define I2C_CR2 I2C	(*(volatile uint8_t *)0x5211)
#define I2C_FREQR	(*(volatile uint8_t *)0x5212)
#define I2C_OARL	(*(volatile uint8_t *)0x5213)
#define I2C_OARH	(*(volatile uint8_t *)0x5214)
#define I2C_DR	(*(volatile uint8_t *)0x5216)
#define I2C_SR1	(*(volatile uint8_t *)0x5217)
#define I2C_SR2	(*(volatile uint8_t *)0x5218)
#define I2C_SR3	(*(volatile uint8_t *)0x5219)
#define I2C_ITR	(*(volatile uint8_t *)0x521A)
#define I2C_CCRL	(*(volatile uint8_t *)0x521B)
#define I2C_CCRH	(*(volatile uint8_t *)0x521C)
#define I2C_TRISER	(*(volatile uint8_t *)0x521D)
#define I2C_PECR	(*(volatile uint8_t *)0x521E)

#define UART1_SR	(*(volatile uint8_t *)0x5230)
#define UART1_DR	(*(volatile uint8_t *)0x5231)
#define UART1_BRR1	(*(volatile uint8_t *)0x5232)
#define UART1_BRR2	(*(volatile uint8_t *)0x5233)
#define UART1_CR1	(*(volatile uint8_t *)0x5234)
#define UART1_CR2	(*(volatile uint8_t *)0x5235)
#define UART1_CR3	(*(volatile uint8_t *)0x5236)
#define UART1_CR4	(*(volatile uint8_t *)0x5237)
#define UART1_CR5	(*(volatile uint8_t *)0x5238)
#define UART1_GTR	(*(volatile uint8_t *)0x5239)
#define UART1_PSCR	(*(volatile uint8_t *)0x523A)

#define TIM1_CR1	(*(volatile uint8_t *)0x5250)
#define TIM1_CR2	(*(volatile uint8_t *)0x5251)
#define TIM1_SMCR	(*(volatile uint8_t *)0x5252)
#define TIM1_ETR	(*(volatile uint8_t *)0x5253)
#define TIM1_IER	(*(volatile uint8_t *)0x5254)
#define TIM1_SR1	(*(volatile uint8_t *)0x5255)
#define TIM1_SR2	(*(volatile uint8_t *)0x5256)
#define TIM1_EGR	(*(volatile uint8_t *)0x5257)
#define TIM1_CCMR1	(*(volatile uint8_t *)0x5258)
#define TIM1_CCMR2	(*(volatile uint8_t *)0x5259)
#define TIM1_CCMR3	(*(volatile uint8_t *)0x525A)
#define TIM1_CCMR4	(*(volatile uint8_t *)0x525B)
#define TIM1_CCER1	(*(volatile uint8_t *)0x525C)
#define TIM1_CCER2	(*(volatile uint8_t *)0x525D)
#define TIM1_CNTRH	(*(volatile uint8_t *)0x525E)
#define TIM1_CNTRL	(*(volatile uint8_t *)0x525F)
#define TIM1_PSCRH	(*(volatile uint8_t *)0x5260)
#define TIM1_PSCRL	(*(volatile uint8_t *)0x5261)
#define TIM1_ARRH	(*(volatile uint8_t *)0x5262)
#define TIM1_ARRL	(*(volatile uint8_t *)0x5263)
#define TIM1_RCR	(*(volatile uint8_t *)0x5264)
#define TIM1_CCR1H	(*(volatile uint8_t *)0x5265)
#define TIM1_CCR1L	(*(volatile uint8_t *)0x5266)
#define TIM1_CCR2H	(*(volatile uint8_t *)0x5267)
#define TIM1_CCR2L	(*(volatile uint8_t *)0x5268)
#define TIM1_CCR3H	(*(volatile uint8_t *)0x5269)
#define TIM1_CCR3L	(*(volatile uint8_t *)0x526A)
#define TIM1_CCR4H	(*(volatile uint8_t *)0x526B)
#define TIM1_CCR4L	(*(volatile uint8_t *)0x526C)
#define TIM1_BKR	(*(volatile uint8_t *)0x526D)
#define TIM1_DTR	(*(volatile uint8_t *)0x526E)
#define TIM1_OISR	(*(volatile uint8_t *)0x526F)

#if defined(STM8S003)
    #define TIM2_CR1	(*(volatile uint8_t *)0x5300)
    #define TIM2_IER	(*(volatile uint8_t *)0x5303)
    #define TIM2_SR1	(*(volatile uint8_t *)0x5304)
    #define TIM2_SR2	(*(volatile uint8_t *)0x5305)
    #define TIM2_EGR	(*(volatile uint8_t *)0x5306)
    #define TIM2_CCMR1	(*(volatile uint8_t *)0x5307)
    #define TIM2_CCMR2	(*(volatile uint8_t *)0x5308)
    #define TIM2_CCMR3	(*(volatile uint8_t *)0x5309)
    #define TIM2_CCER1	(*(volatile uint8_t *)0x530A)
    #define TIM2_CCER2	(*(volatile uint8_t *)0x530B)
    #define TIM2_CNTRH	(*(volatile uint8_t *)0x530C)
    #define TIM2_CNTRL	(*(volatile uint8_t *)0x530D)
    #define TIM2_PSCR	(*(volatile uint8_t *)0x530E)
    #define TIM2_ARRH	(*(volatile uint8_t *)0x530F)
    #define TIM2_ARRL	(*(volatile uint8_t *)0x5310)
    #define TIM2_CCR1H	(*(volatile uint8_t *)0x5311)
    #define TIM2_CCR1L	(*(volatile uint8_t *)0x5312)
    #define TIM2_CCR2H	(*(volatile uint8_t *)0x5313)
    #define TIM2_CCR2L	(*(volatile uint8_t *)0x5314)
    #define TIM2_CCR3H	(*(volatile uint8_t *)0x5315)
    #define TIM2_CCR3L	(*(volatile uint8_t *)0x5316)
#endif

#if defined(STM8S005)
    #define TIM2_CR1	(*(volatile uint8_t *)0x5300)
    #define TIM2_IER	(*(volatile uint8_t *)0x5301)
    #define TIM2_SR1	(*(volatile uint8_t *)0x5302)
    #define TIM2_SR2	(*(volatile uint8_t *)0x5303)
    #define TIM2_EGR	(*(volatile uint8_t *)0x5304)
    #define TIM2_CCMR1	(*(volatile uint8_t *)0x5305)
    #define TIM2_CCMR2	(*(volatile uint8_t *)0x5306)
    #define TIM2_CCMR3	(*(volatile uint8_t *)0x5307)
    #define TIM2_CCER1	(*(volatile uint8_t *)0x5308)
    #define TIM2_CCER2	(*(volatile uint8_t *)0x5309)
    #define TIM2_CNTRH	(*(volatile uint8_t *)0x530A)
    #define TIM2_CNTRL	(*(volatile uint8_t *)0x530B)
    #define TIM2_PSCR	(*(volatile uint8_t *)0x530C)
    #define TIM2_ARRH	(*(volatile uint8_t *)0x530D)
    #define TIM2_ARRL	(*(volatile uint8_t *)0x530E)
    #define TIM2_CCR1H	(*(volatile uint8_t *)0x530F)
    #define TIM2_CCR1L	(*(volatile uint8_t *)0x5310)
    #define TIM2_CCR2H	(*(volatile uint8_t *)0x5311)
    #define TIM2_CCR2L	(*(volatile uint8_t *)0x5312)
    #define TIM2_CCR3H	(*(volatile uint8_t *)0x5313)
    #define TIM2_CCR3L	(*(volatile uint8_t *)0x5314)
#endif // defined

#if defined(STM8S005)
    // TIM3
    #define TIM3_CR1	(*(volatile uint8_t *)0x5320)
    #define TIM3_IER	(*(volatile uint8_t *)0x5321)
    #define TIM3_SR1	(*(volatile uint8_t *)0x5322)
    #define TIM3_SR2	(*(volatile uint8_t *)0x5323)
    #define TIM3_EGR	(*(volatile uint8_t *)0x5324)
    #define TIM3_CCMR1	(*(volatile uint8_t *)0x5325)
    #define TIM3_CCMR2	(*(volatile uint8_t *)0x5326)
    #define TIM3_CCER1	(*(volatile uint8_t *)0x5327)
    #define TIM3_CNTRH	(*(volatile uint8_t *)0x5328)
    #define TIM3_CNTRL	(*(volatile uint8_t *)0x5329)
    #define TIM3_PSCR	(*(volatile uint8_t *)0x532A)
    #define TIM3_ARRH	(*(volatile uint8_t *)0x532B)
    #define TIM3_ARRL	(*(volatile uint8_t *)0x532C)
    #define TIM3_CCR1H	(*(volatile uint8_t *)0x532D)
    #define TIM3_CCR1L	(*(volatile uint8_t *)0x532E)
    #define TIM3_CCR2H	(*(volatile uint8_t *)0x532F)
    #define TIM3_CCR2L	(*(volatile uint8_t *)0x5330)
#endif

#define TIM4_CR1	(*(volatile uint8_t *)0x5340)
#define TIM4_IER	(*(volatile uint8_t *)0x5343)
#define TIM4_SR	(*(volatile uint8_t *)0x5344)
#define TIM4_EGR	(*(volatile uint8_t *)0x5345)
#define TIM4_CNTR	(*(volatile uint8_t *)0x5346)
#define TIM4_PSCR	(*(volatile uint8_t *)0x5347)
#define TIM4_ARR	(*(volatile uint8_t *)0x5348)

#define ADC1_DBxR	(*(volatile uint8_t *)0x53F3)
#define ADC1_CSR	(*(volatile uint8_t *)0x5400)
#define ADC1_CR1	(*(volatile uint8_t *)0x5401)
#define ADC1_CR2	(*(volatile uint8_t *)0x5402)
#define ADC1_CR3	(*(volatile uint8_t *)0x5403)
#define ADC1_DRH	(*(volatile uint8_t *)0x5404)
#define ADC1_DRL	(*(volatile uint8_t *)0x5405)
#define ADC1_TDRH	(*(volatile uint8_t *)0x5406)
#define ADC1_TDRL	(*(volatile uint8_t *)0x5407)
#define ADC1_HTRH	(*(volatile uint8_t *)0x5408)
#define ADC1_HTRL	(*(volatile uint8_t *)0x5409)
#define ADC1_LTRH	(*(volatile uint8_t *)0x540A)
#define ADC1_LTRL	(*(volatile uint8_t *)0x540B)
#define ADC1_AWSRH	(*(volatile uint8_t *)0x540C)
#define ADC1_AWSRL	(*(volatile uint8_t *)0x540D)
#define ADC1_AWCRH	(*(volatile uint8_t *)0x540E)
#define ADC1_AWCRL	(*(volatile uint8_t *)0x540F)

/* ADC bits */
#define ADC_CR1_ADON (1 << 0)
#define ADC_CR1_CONT (1 << 1)
#define ADC_CR2_ALIGN (1 << 3)
#define ADC_CSR_EOC (1 << 7)

#define A	(*(volatile uint8_t *)0x7F00)
#define PCE	(*(volatile uint8_t *)0x7F01)
#define PCH	(*(volatile uint8_t *)0x7F02)
#define PCL	(*(volatile uint8_t *)0x7F03)
#define XH	(*(volatile uint8_t *)0x7F04)
#define XL	(*(volatile uint8_t *)0x7F05)
#define YH	(*(volatile uint8_t *)0x7F06)
#define YL	(*(volatile uint8_t *)0x7F07)
#define SPH	(*(volatile uint8_t *)0x7F08)
#define SPL	(*(volatile uint8_t *)0x7F09)
#define CCR	(*(volatile uint8_t *)0x7F0A)
#define CFG_GCR	(*(volatile uint8_t *)0x7F60)

#define ITC_SPR1	(*(volatile uint8_t *)0x7F70)
#define ITC_SPR2	(*(volatile uint8_t *)0x7F71)
#define ITC_SPR3	(*(volatile uint8_t *)0x7F72)
#define ITC_SPR4	(*(volatile uint8_t *)0x7F73)
#define ITC_SPR5	(*(volatile uint8_t *)0x7F74)
#define ITC_SPR6	(*(volatile uint8_t *)0x7F75)
#define ITC_SPR7	(*(volatile uint8_t *)0x7F76)
#define ITC_SPR8	(*(volatile uint8_t *)0x7F77)
#define SWIM_CSR	(*(volatile uint8_t *)0x7F80)
#define DM_BK1RE	(*(volatile uint8_t *)0x7F90)
#define DM_BK1RH	(*(volatile uint8_t *)0x7F91)
#define DM_BK1RL	(*(volatile uint8_t *)0x7F92)
#define DM_BK2RE	(*(volatile uint8_t *)0x7F93)
#define DM_BK2RH	(*(volatile uint8_t *)0x7F94)
#define DM_BK2RL	(*(volatile uint8_t *)0x7F95)
#define DM_CR1	(*(volatile uint8_t *)0x7F96)
#define DM_CR2	(*(volatile uint8_t *)0x7F97)
#define DM_CSR1	(*(volatile uint8_t *)0x7F98)
#define DM_CSR2	(*(volatile uint8_t *)0x7F99)
#define DM_ENFCTR	(*(volatile uint8_t *)0x7F9A)



/* ------------------- USART ------------------- */
#define USART1_SR (*(volatile uint8_t *) 0x5230)
#define USART1_DR (*(volatile uint8_t *) 0x5231)
#define USART1_BRR1 (*(volatile uint8_t *) 0x5232)
#define USART1_BRR2 (*(volatile uint8_t *) 0x5233)
#define USART1_CR1 (*(volatile uint8_t *) 0x5234)
#define USART1_CR2 (*(volatile uint8_t *) 0x5235)
#define USART1_CR3 (*(volatile uint8_t *) 0x5236)
#define USART1_CR4 (*(volatile uint8_t *) 0x5237)
#define USART1_CR5 (*(volatile uint8_t *) 0x5238)
#define USART1_GTR (*(volatile uint8_t *) 0x5239)
#define USART1_PSCR (*(volatile uint8_t *) 0x523A)

/* USART_CR1 bits */
#define USART_CR1_R8 (1 << 7)
#define USART_CR1_T8 (1 << 6)
#define USART_CR1_UARTD (1 << 5)
#define USART_CR1_M (1 << 4)
#define USART_CR1_WAKE (1 << 3)
#define USART_CR1_PCEN (1 << 2)
#define USART_CR1_PS (1 << 1)
#define USART_CR1_PIEN (1 << 0)

/* USART_CR2 bits */
#define USART_CR2_TIEN (1 << 7)
#define USART_CR2_TCIEN (1 << 6)
#define USART_CR2_RIEN (1 << 5)
#define USART_CR2_ILIEN (1 << 4)
#define USART_CR2_TEN (1 << 3)
#define USART_CR2_REN (1 << 2)
#define USART_CR2_RWU (1 << 1)
#define USART_CR2_SBK (1 << 0)

/* USART_CR3 bits */
#define USART_CR3_LINEN (1 << 6)
#define USART_CR3_STOP2 (1 << 5)
#define USART_CR3_STOP1 (1 << 4)
#define USART_CR3_CLKEN (1 << 3)
#define USART_CR3_CPOL (1 << 2)
#define USART_CR3_CPHA (1 << 1)
#define USART_CR3_LBCL (1 << 0)

/* USART_SR bits */
#define USART_SR_TXE (1 << 7)
#define USART_SR_TC (1 << 6)
#define USART_SR_RXNE (1 << 5)
#define USART_SR_IDLE (1 << 4)
#define USART_SR_OR (1 << 3)
#define USART_SR_NF (1 << 2)
#define USART_SR_FE (1 << 1)
#define USART_SR_PE (1 << 0)
